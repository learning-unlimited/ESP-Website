# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2022-02-08 20:48
from __future__ import unicode_literals

from __future__ import absolute_import
from django.db import migrations, models

from esp.accounting.controllers import IndividualAccountingController
from esp.program.models import Program
from esp.users.models import ESPUser

def set_my_defaults(apps, schema_editor):
    Record = apps.get_model('users', 'Record')
    Transfer = apps.get_model('accounting', 'Transfer')
    LineItemType = apps.get_model('accounting', 'LineItemType')
    Account = apps.get_model('accounting', 'Account')
    recs = Record.objects.filter(event="paid", program__isnull=False, user__isnull=False)
    for rec in recs:
        # Use normal imports to get amount_due
        prog = Program.objects.get(id=rec.program.id)
        user = ESPUser.objects.get(id=rec.user.id)
        iac = IndividualAccountingController(prog, user)
        amount_due = iac.amount_due()

        if amount_due:
            # Use migration imports to create payment
            payments_lit = LineItemType.objects.filter(program__id=rec.program.id, for_payments=True).order_by('-id')[0]
            target_account = Account.objects.get(name='receivable')
            Transfer.objects.create(source=None,
                                    destination=target_account,
                                    user=rec.user,
                                    line_item=payments_lit,
                                    amount_dec=amount_due,
                                    transaction_id="created from deprecated paid records")
    recs.delete()

def reverse_func(apps, schema_editor):
    Transfer = apps.get_model('accounting', 'Transfer')
    Record = apps.get_model('users', 'Record')
    tfs = Transfer.objects.filter(transaction_id="created from deprecated paid records")
    for tf in tfs:
        prog = Program.objects.get(id=tf.line_item.program.id)
        user = ESPUser.objects.get(id=tf.user.id)
        if IndividualAccountingController(prog, user).has_paid(in_full=True):
            Record.objects.get_or_create(user=tf.user, program=tf.line_item.program, event="paid")
    tfs.delete()

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0025_auto_20210617_0839'),
    ]

    operations = [
        migrations.AlterField(
            model_name='permission',
            name='permission_type',
            field=models.CharField(choices=[('Administer', 'Full administrative permissions'), ('View', 'Able to view a program'), ('Onsite', 'Access to onsite interfaces'), ('GradeOverride', 'Ignore grade ranges for studentreg'), ('OverrideFull', 'Register for a full program'), ('OverridePhaseZero', 'Bypass Phase Zero to proceed to other student reg modules'), ('Student Deadlines', (('Student/All', 'All student deadlines'), ('Student', 'Basic student access'), ('Student/MainPage', 'Registration mainpage'), ('Student/Profile', 'Set profile info'), ('Student/Acknowledgement', 'Student acknowledgement'), ('Student/FormstackMedliab', 'Access to Formstack medical and liability form'), ('Student/PhaseZero', 'Enter Phase Zero'), ('Student/Applications', 'Apply for classes'), ('Student/Classes', 'Register for classes'), ('Student/Classes/Lunch', 'Register for lunch'), ('Student/Classes/Lottery', 'Enter the lottery'), ('Student/Classes/Lottery/View', 'View lottery results'), ('Student/Confirm', 'Confirm registration'), ('Student/Cancel', 'Cancel registration'), ('Student/Removal', 'Remove class registrations after registration closes'), ('Student/Finaid', 'Access to financial aid application'), ('Student/ExtraCosts', 'Extra costs page'), ('Student/Payment', 'Pay for a program'), ('Student/Webapp', 'Access to student onsite webapp'), ('Student/Survey', 'Access to survey'))), ('Teacher Deadlines', (('Teacher/All', 'All teacher deadlines'), ('Teacher', 'Basic teacher access'), ('Teacher/MainPage', 'Registration mainpage'), ('Teacher/Profile', 'Set profile info'), ('Teacher/Acknowledgement', 'Teacher acknowledgement'), ('Teacher/Availability', 'Set availability'), ('Teacher/Moderate', 'Fill out the moderator form'), ('Teacher/Events', 'Teacher training signup'), ('Teacher/Quiz', 'Teacher quiz'), ('Teacher/Catalog', 'Catalog'), ('Teacher/Classes/All', 'All classes deadlines'), ('Teacher/Classes', 'Classes'), ('Teacher/Classes/View', 'View registered classes'), ('Teacher/Classes/Edit', 'Edit registered classes'), ('Teacher/Classes/CancelReq', 'Request class cancellation'), ('Teacher/Classes/Coteachers', 'Add or remove coteachers'), ('Teacher/Classes/Create', 'Create classes of all types'), ('Teacher/Classes/Create/Class', 'Create standard classes'), ('Teacher/Classes/Create/OpenClass', 'Create open classes'), ('Teacher/AppReview', "Review students' apps"), ('Teacher/Webapp', 'Access to teacher onsite webapp'), ('Teacher/Survey', 'Access to survey'))), ('Volunteer Deadlines', (('Volunteer', 'Basic volunteer access'), ('Volunteer/Signup', 'Volunteer signup')))], max_length=80),
        ),
        migrations.RunPython(set_my_defaults, reverse_func),
    ]
