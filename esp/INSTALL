

INSTALL File For the ESP Web site
=================================

modified:
    2007-04-04 (axiak)
    2008-11-25 (davidben)
    2009-04-21 (price)
    2010-08-22 (price)
    2011-10-17 (gurtej)
    2011-10-22 (gurtej)
    
You have presumably downloaded the source code for ESP's web site.
Here are the steps to get the site operational on your computer:

Note: I will refer to the directory which contains this README file as '/'.

Note: The ESP Web site is based on the Django Web framework; the Django
documentation will be very helpful.  Refer to it at:
http://docs.djangoproject.com/en/dev/


1) Install all required software.  The software libraries you need are
summarized below.

a) Libraries obtained from the Internet

Library name    Type    Version         Ubuntu package name or download location
------------    ----    -------         -------------------
Lighttpd        System                  lighttpd
PostgreSQL      System  8.3             postgresql-8.3

python          System  2.5             python

django          Python  1.0.2           python-django*
DNS             Python                  python-dns
setuptools      Python                  python-setuptools
cmemcached      Python                  http://gijsbert.org/cmemcache/index.html

pylibmc         Python (easy_install)   N/A           
PIL             Python (easy_install)   N/A            
twill           Python (easy_install)   N/A                      
flup            Python (easy_install)   N/A                      
simplejson      Python (easy_install)   N/A                      
pycurl          Python (easy_install)   N/A                      
xlwt            Python (easy_install)   N/A                      
South           Python (easy_install)   N/A    
django-extensions    Python (easy_install)   N/A    
form_utils      Python (easy_install)   https://bitbucket.org/carljm/django-form-utils/src
psycopg         Python (easy_install)   N/A    * Choose psycopg or psycopg2 and update local_settings.py DATABASE_BACKEND
psycopg2        Python (easy_install)   N/A      (default is psycopg2)
django-debug-toolbar    Python (easy_install)   N/A       * Optional
reversion       Python 1.5.1            https://github.com/etianen/django-reversion
selenium	Python (easy_install)	N/A
django-selenium	Python (easy_install)	0.3
django-selenium-test-runner	Python (easy_install)	N/A

selenium-server-standalone	System	http://selenium.googlecode.com/files/selenium-server-standalone-2.9.0.jar

LaTeX           System                  texlive, texlive-latex-extra
libcurl         System                  libcurl4-openssl-dev
libmemcached    System                  libmemcached2, libmemcached-dev
libmemcache0    System                  libmemcache0
libpq           System                  libpq-dev
ImageMagick     System                  imagemagick
memcached       System                  memcached
dvipng          System                  dvipng

Note that the Lighttpd Web server is included in the list above.  
Apache2 and Lighttpd have both been used successfully.  After installing 
the server of your choice, check that you have Python support 
(e.g. mod_python).  You may follow the installation instructions included 
with Django for your chosen server:
http://code.djangoproject.com/wiki/ServerArrangements

b) Libraries included with the ESP Web site distribution

We include two Python libraries that you can install: iCalendar and 
python-memcached.  These are located in the /esp/3rdparty directory.  
Please unzip them and follow their respective installation instructions.

Another Python library, sslauth, is used by default to allow HTTPS
certificate authentication.  It is located in the /esp/3rdparty directory.
To install it, add [path to working copy]/esp/3rdparty to your PYTHONPATH
environment variable or copy the sslauth directory to someplace that is on
the PYTHONPATH (e.g. /usr/local/lib/python2.6/dist-packages).

2) Set up your database.

a) Create a login role

Come up with a unique name and password for the site-specific database 
account (login role).  This role will be used for all queries generated
by Django.  In psql, the syntax for creating a login role is

CREATE ROLE [username] LOGIN PASSWORD '[password'];

This can also be done using the pgadmin3 graphical administration tool.  

b) Create a database

Come up with a database name, typically including part of your
organization's name as well as 'django'  (e.g. 'stanford_django'). 
Then add this database using psql or pgadmin3:

CREATE DATABASE [dbname] OWNER [username] WITH ENCODING 'utf8';

You will also need to add the plpgsql language to your database.
This language is used by some of our stored procedures.  To do this,
from the psql prompt, first connect to the new database:

\c [dbname]

Then add the plpgsql language:

CREATE LANGUAGE plpgsql;


3) Configure Django.

a) Create a local_settings.py file in /esp/. You can do this like so:

$ cd ./esp
$ cp local_settings.py.default local_settings.py
$ pico local_settings.py <-- set PROJECT_ROOT and LOG_FILE; use *full* paths
$ cd ..

NOTE: If you wish to change a setting in django_settings.py, override the value
in local_settings.py. To configure middleware, modify MIDDLEWARE_LOCAL.

b) Create a database_settings.py file:

$ cd ./esp 
$ cp database_settings.py.default database_settings.py
$ pico database_settings.py <-- change the database user and password
                                to match the login role you created
$ cd ..

c) Create database tables

If you are setting up an ESP server for development purposes, you may want to
initialize your database from a backup of your organization's database. 

Otherwise, use Django's manage.py script to initialize your database:

$ cd ./esp
$ ./manage.py syncdb
$ ./manage.py migrate

During the syncdb step, Django will ask you to add a super user.  
Please do this so that you have administrative access when you start
using the site.

d) Set up media files

If your organization has already customized the look and feel of their site,
you will want to add their images and stylesheets to your working copy.  
Often these are stored in a shared filesystem such as a Dropbox.  Obtain
a copy of these files and then link them into the publicly served media
directory as follows:

$ cd ./public/media
$ ln -s [path to Dropbox]/media/images images
$ ln -s [path to Dropbox]/media/styles styles

If, instead, you are starting from scratch, copy the provided generic images
and stylesheets to the active folders:

$ cd ./public/media
$ ln -s default_images images
$ ln -s default_styles styles

e) Make admin interface pretty

You will need to add a symbolic link for the images and stylesheets used by
the Django admin interface (/admin).  From the same directory (/public/media)
as above:

$ ln -s /var/lib/python-support/python2.5/django/contrib/admin/media admin


4) Explore your site

At this point you should be able to restart your Web server and access the 
site you've set up in a Web browser.  You can now:
- edit the site's data (go to http://[hostname]/admin)
- create static pages (start by typing in the desired URL)
- change the styles and graphics (edit the files in /templates and /public/media)
- set up programs (click the "Admin" button on the home page)

Please refer to the documentation pages on the Learning Unlimited Wiki, which
explain how to perform many common tasks with your newly set-up site:
  http://wiki.learningu.org/How_to_use_the_website

