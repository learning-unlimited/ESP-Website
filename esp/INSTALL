

INSTALL File For the ESP Web site
=================================

modified:
    2007-04-04 (axiak)
    2008-11-25 (davidben)
    2009-04-21 (price)
    2010-08-22 (price)
    2011-10-17 (gurtej)
    2011-10-22 (gurtej)
    2013-07-11 (lua)
    
You have presumably downloaded the source code for ESP's web site.
Here are the steps to get the site operational on your computer:

Note: I will refer to the directory which contains this README file as '/'.

Note: The ESP Web site is based on the Django Web framework; the Django
documentation will be very helpful.  Refer to it at:
http://docs.djangoproject.com/en/dev/

Automatic install (for Ubuntu):

The easiest way to setup up the website is to run the server setup
script at /useful_scripts/server_setup/dev_server_setup.sh. The script
will prompt you through the installation process.


Manual install:

1) Install all required software.  The software libraries you need are
summarized below.

a) Libraries obtained from the Internet

If you use Ubuntu, a list of required system packages can be found in
`packages.txt` in this directory; you can install them all at once
with "apt-get install -y $(< packages.txt)". Note that if you use this
approach, you still must download selenium-server-standalone
separately.

Library name    Type    Version         Ubuntu package name or download location
------------    ----    -------         -------------------
Lighttpd        System                  lighttpd
Apache mod_wsgi System                  libapache2-mod-wsgi
PostgreSQL      System  9.1             postgresql-9.1
LaTeX           System                  texlive, texlive-latex-extra
libcurl         System                  libcurl4-openssl-dev
libmemcached    System                  libmemcached6, libmemcached-dev
libpq           System                  libpq-dev
ImageMagick     System                  imagemagick
memcached       System                  memcached
dvipng          System                  dvipng
libevent        System                  libevent-dev
zlib            System                  zlib1g-dev
python          System  2.5             python
setuptools      Python                  python-setuptools
virtualenv      Python                  python-virtualenv
selenium-server-standalone	System	http://selenium.googlecode.com/files/selenium-server-standalone-2.9.0.jar
Node.js         System                  nodejs
LESS            JS                      node-less

Note that the Lighttpd Web server is included in the list above.
Apache2 and Lighttpd have both been used successfully.  After
installing the server of your choice, check that you have Python
support (e.g. mod_wsgi).  You may follow the installation instructions
included with Django for your chosen server:
http://code.djangoproject.com/wiki/ServerArrangements

In addition, a list of required Python libraries can be found in
`requirements.txt`. It is recommended that you first set up virtualenv
according to the instructions here:
http://www.virtualenv.org/

Note that in order for the installation to automatically detect and
use the libraries installed in your virtualenv, you must create it in
a directory called `env` in the top level directory of this repository
(with `virtualenv /path/to/env`). Otherwise, you must
activate it before running any management commands (with `source
/path/to/env/bin/activate`).

Once you have created and activated a virtualenv, you can install all
of the Python dependencies with "pip install -r requirements.txt".

2) Set up your database.

a) Create a login role

Come up with a unique name and password for the site-specific database 
account (login role).  This role will be used for all queries generated
by Django.  In psql, the syntax for creating a login role is

CREATE ROLE [username] LOGIN PASSWORD '[password'];

This can also be done using the pgadmin3 graphical administration tool.  

b) Create a database

Come up with a database name, typically including part of your
organization's name as well as 'django'  (e.g. 'stanford_django'). 
Then add this database using psql or pgadmin3:

CREATE DATABASE [dbname] OWNER [username];


3) Configure Django.

a) Create a local_settings.py file in /esp/. You can do this like so:

$ cd ./esp
$ cp local_settings.py.default local_settings.py
$ pico local_settings.py <-- set PROJECT_ROOT and LOG_FILE; use *full* paths
$ cd ..

NOTE: If you wish to change a setting in django_settings.py, override the value
in local_settings.py. To configure middleware, modify MIDDLEWARE_LOCAL.

b) Create a database_settings.py file:

$ cd ./esp 
$ cp database_settings.py.default database_settings.py
$ pico database_settings.py <-- change the database user and password
                                to match the login role you created
$ cd ..

c) Create database tables

If you are setting up an ESP server for development purposes, you may want to
initialize your database from a backup of your organization's database. 

Otherwise, use Django's manage.py script to initialize your database:

$ cd ./esp
$ ./manage.py syncdb
$ ./manage.py migrate

During the syncdb step, Django will ask you to add a super user.  
Please do this so that you have administrative access when you start
using the site.

d) Set up media files

If your organization has already customized the look and feel of their site,
you will want to add their images and stylesheets to your working copy.  
Often these are stored in a shared filesystem such as a Dropbox.  Obtain
a copy of these files and then link them into the publicly served media
directory as follows:

$ cd ./public/media
$ ln -s [path to Dropbox]/media/images images
$ ln -s [path to Dropbox]/media/styles styles

If, instead, you are starting from scratch, copy the provided generic images
and stylesheets to the active folders:

$ cd ./public/media
$ ln -s default_images images
$ ln -s default_styles styles


4) Explore your site

At this point you should be able to run your Web server (./manage.py runserver)
and access the site you've set up in a Web browser.  You can now:
- edit the site's data (go to http://[hostname]/admin)
- create static pages (start by typing in the desired URL)
- change the styles and graphics (edit the files in /templates and /public/media)
- set up programs (click the "Admin" button on the home page)

Please refer to the documentation pages on the Learning Unlimited Wiki, which
explain how to perform many common tasks with your newly set-up site:
  http://wiki.learningu.org/How_to_use_the_website

